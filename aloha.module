<?php

/**
 * @file
 * Provides integration with the Aloha Editor WYSIWYG editor.
 */

/**
 * @todo: the currently included build of AE is not yet optimal for Drupal; we
 *        must create a build of AE that bundles the JS and CSS in single JS &
 *        CSS files on a per-AE plug-in basis. Then, we'll be able to define
 *        libraries in hook_library() for each of the plug-ins, allowing Drupal
 *        to reason about AE's dependencies.
 *        So: finish + leverage @nod_'s 'build-with-plugin-separated' profile in
 *        AE.
 */

define('ALOHA_VERSION', "custom build: 0.21.2 + patches"); // @todo: establish a versioning scheme for our custom build


/**
 * Implements hook_menu()
 */
function aloha_menu() {
  $items = array();
  $items['aloha/repository/link/%'] = array(
    'page callback'    => 'aloha_repository_link',
    'page arguments'   => array(3),
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
    'file'             => 'includes/pages.inc',
  );

  return $items;
}

/**
 * Implements hook_library().
 */
function aloha_library() {
  // Location of Aloha Editor build we're using and the main JS file within it.
  $library_path = drupal_get_path('module', 'aloha') . '/build/alohaeditor';
  $library_file = "aloha.js";

  $libraries['aloha-for-textareas'] = array(
    'title' => 'Drupal behavior to enable Aloha Editor WYSIWYG editing on textareas.',
    'version' => VERSION,
    'js' => array(
      drupal_get_path('module', 'aloha') . '/js/aloha.textareas.js' => array(),
      aloha_plugin_js_settings(array(
        // Allow other modules, e.g. the Edit module, to embed the rendered
        // toolbar within their own DOM infrastructure.
        'DrupalUI' => array(
          'renderOwnToolbarContainer' => TRUE,
        ),
      )),
    ),
    'css' => array(
      drupal_get_path('module', 'aloha') . '/css/aloha-drupal-ui-textareas.css',
      // @todo clean up
      drupal_get_path('module', 'aloha') . '/css/edit.css',
    ),
    'dependencies' => array(
      array('aloha', 'aloha'),
    )
  );

  // Modules that want to add Aloha Editor plug-ins to the list of plug-ins to
  // be loaded should hook_library_alter() this library and inject their own
  // dependencies.
  // Look at Drupal.settings.aloha.settings.plugins.load (this is identical to
  // Aloha.settings.plugins) to see the fullly expanded list of Aloha Editor
  // plug-ins that will be loaded.
  $libraries['aloha'] = array(
    'title' => 'Pseudo-library that depends on the core of Aloha Editor and contains a list of all Aloha Editor plug-ins that should be loaded.',
    'version' => ALOHA_VERSION,
    'dependencies' => array(
      // The Aloha Editor core.
      array('aloha', 'aloha.core'),
      // Our custom UI.
      array('aloha', 'aloha.drupal-aloha/drupal-ui'),
      // A sensible list of default plug-ins.
      array('aloha', 'aloha.common/contenthandler'),
      array('aloha', 'aloha.common/format'),
      array('aloha', 'aloha.common/align'),
      array('aloha', 'aloha.common/list'),
      array('aloha', 'aloha.common/link'),
      array('aloha', 'aloha.common/paste'),
      // Tight Drupal integration.
      array('aloha', 'aloha.drupal-aloha/drupal'),
    ),
  );

  $libraries['aloha.core'] = array(
    'title' => 'Aloha Editor',
    'website' => 'http://aloha-editor.org/',
    'version' => ALOHA_VERSION,
    'js' => array(
      // First, load require.js. It must be loaded *before* jQuery, because only
      // then, jQuery will define itself as a require.js module.
      $library_path . '/lib/require.js' => array(
        'data' => $library_path . '/lib/require.js',
        'type' => 'file',
        'scope' => 'header',
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
        'weight' => -21, // jquery.js has weight -20
        'preprocess' => TRUE,
        'cache' => TRUE,
        'defer' => FALSE,
      ),
      // Load the aggregated Aloha JS file.
      $library_path . '/lib/' . $library_file => array(
        'group' => JS_LIBRARY,
        'weight' => -999,
        'defer' => FALSE,
        'attributes' => array(
          // Deferred initialization to make it possible for Aloha.settings to
          // live in Drupal.settings. Actual initializawtion is done in
          // drupal-aloha.js.
          'data-aloha-defer-init' => 'true',
        ),
      ),
      drupal_get_path('module', 'aloha') . '/js/drupal-aloha.js' => array(
        'group' => JS_LIBRARY,
        'defer' => FALSE,
      ),
      // Aloha Editor core settings.
      aloha_plugin_js_settings(array(
        'baseUrl' => file_create_url($library_path . '/lib'),
        // Reduce delays for the "aloha-smart-content-changed" events to a
        // minimum.
        'smartContentChange' => array(
          'idle'  => 200,
          'delay' => 100,
        ),
      )),
    ),
    'css' => array(
      $library_path . '/css/aloha.css',
      drupal_get_path('module', 'aloha') . '/css/aloha-overrides.css',
    ),
    'dependencies' => array(
      array('aloha', 'aloha.common/commands'),
      array('system', 'jquery'),
    )
  );

  // Aloha Editor: "common" bundle of plug-ins (shipped with Aloha Editor).
  $libraries['aloha.common/ui'] = array(
    'title' => 'Aloha Editor plug-in: UI.',
    'version' => ALOHA_VERSION,
    'js' => array(
      aloha_plugin_js_settings(array(
        'plugins' => array('load' => array('common/ui')),
        // We don't want to use Aloha Editor's sidebar in Drupal.
        'sidebar' => array('disabled' => TRUE),
      )),
    ),
  );
  $libraries['aloha.common/commands'] = array(
    'title' => 'Aloha Editor plug-in: commands.',
    'version' => ALOHA_VERSION,
    'js' => array(
      aloha_plugin_js_settings(array(
        'plugins' => array('load' => array('common/commands')),
      )),
    ),
  );
  $libraries['aloha.common/format'] = array(
    'title' => 'Aloha Editor plug-in: formatting.',
    'version' => ALOHA_VERSION,
    'js' => array(
      aloha_plugin_js_settings(array(
        'plugins' => array(
          'load' => array('common/format'),
          // Note: the DrupalContentHandler plug-in will ensure that only tags
          // specified in the editable's data-edit-allowed-tags attribute will
          // be allowed. Here, we must specify the whole range of available
          // HTML tags.
          'format' => array('config' => array(
            // Inline HTML elements.
            'strong', 'em', 'b', 'i', 'u', 's', 'sub', 'sup',
            // Block-level HTML elements.
            'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'pre',
            // Non-HTML.
            'removeFormat',
          )),
        )
      )),
    ),
  );
  $libraries['aloha.common/align'] = array(
    'title' => 'Aloha Editor plug-in: alignment.',
    'version' => ALOHA_VERSION,
    'js' => array(
      aloha_plugin_js_settings(array(
        'plugins' => array('load' => array('common/align')),
      )),
    ),
  );
  $libraries['aloha.common/list'] = array(
    'title' => 'Aloha Editor plug-in: common/list',
    'version' => ALOHA_VERSION,
    'js' => array(
      aloha_plugin_js_settings(array(
        'plugins' => array(
          'load' => array('common/list'),
          'list' => array('config' => array('ul', 'ol')),
        ),
      )),
    ),
  );
  $libraries['aloha.common/contenthandler'] = array(
    'title' => 'Aloha Editor plug-in: contenthandler.',
    'version' => ALOHA_VERSION,
    'js' => array(
      aloha_plugin_js_settings(array(
        'plugins' => array('load' => array('common/contenthandler')),
      )),
    ),
  );
  $libraries['aloha.common/characterpicker'] = array(
    'title' => 'Aloha Editor plug-in: characterpicker.',
    'version' => ALOHA_VERSION,
    'js' => array(
      aloha_plugin_js_settings(array(
        'plugins' => array('load' => array('common/characterpicker')),
      )),
    ),
  );
  $libraries['aloha.common/paste'] = array(
    'title' => 'Aloha Editor plug-in: paste.',
    'version' => ALOHA_VERSION,
    'js' => array(
      aloha_plugin_js_settings(array(
        'plugins' => array('load' => array('common/paste')),
      )),
    ),
  );
  $libraries['aloha.common/block'] = array(
    'title' => 'Aloha Editor plug-in: Aloha Blocks.',
    'version' => ALOHA_VERSION,
    'js' => array(
      aloha_plugin_js_settings(array(
        'plugins' => array('load' => array('common/block')),
      )),
    ),
  );
  $libraries['aloha.common/link'] = array(
    'title' => 'Aloha Editor plug-in: link.',
    'version' => ALOHA_VERSION,
    'js' => array(
      aloha_plugin_js_settings(array(
        'plugins' => array('load' => array('common/link')),
      )),
    ),
  );

  // Aloha Editor: "drupal-aloha" bundle of plug-ins (shipped with this module).
  $libraries['aloha.drupal-aloha'] = array(
    'title' => 'Register the "drupal-aloha" bundle, this is the bundle that ships with this module, the "Aloha" module.',
    'version' => VERSION,
    'js' => array(
      aloha_plugin_js_settings(array(
        'bundles' => array('drupal-aloha' => file_create_url(drupal_get_path('module', 'aloha') . '/aloha/'))
      )),
    ),
  );
  $libraries['aloha.drupal-aloha/drupal'] = array(
    'title' => '"Drupal" Aloha Editor plug-in: contenthandler + link repository',
    'version' => VERSION,
    'js' => array(
      aloha_plugin_js_settings(array(
        'plugins' => array('load' => array('drupal-aloha/drupal')),
        // URL for link look-ups in the "Drupal" repository.
        'repository' => array(
          'drupal' => array('url' => url('aloha/repository/link/')),
        ),
        'contentHandler' => array(
          'insertHtml' => array('word', 'generic', 'drupal'),
          'handler' => array(
            'generic' => array('transformFormattings' => FALSE),
          ),
          'initEditable' => array(),
        ),
      )),
    ),
    'dependencies' => array(
      // Ensure the "aloha" bundle is registered.
      array('aloha', 'aloha.drupal-aloha'),
      // This plug-in ships with a custom content handler.
      array('aloha', 'aloha.common/contenthandler'),
    )
  );
  $ui_path = drupal_get_path('module', 'aloha') . '/aloha/drupal-ui/lib';
  $libraries['aloha.drupal-aloha/drupal-ui'] = array(
    'title' => 'Drupal-specific UI for Aloha Editor, initially built for Spark.',
    'version' => VERSION,
    'js' => array(
      aloha_plugin_js_settings(array(
        // Overide parts of AE's default UI, so that we can have a custom UI
        // with minimal effort. Essentially, we're reconfiguring require.js
        // here.
        'requireConfig' => array(
          'paths' => array(
            'ui/multiSplit' => file_create_url($ui_path . '/multiSplit'),
            'ui/utils'      => file_create_url($ui_path . '/utils'),
            'ui/toolbar'    => file_create_url($ui_path . '/toolbar'),
            'ui/tab'        => file_create_url($ui_path . '/tab'),
            'ui/menuButton' => file_create_url($ui_path . '/menuButton'),
          )
        ),
      )),
    ),
    'css' => array(
      drupal_get_path('module', 'aloha') . '/css/aloha-drupal-ui.css',
    ),
    'dependencies' => array(
      // Ensure the "drupal-aloha" bundle is registered.
      array('aloha', 'aloha.drupal-aloha'),
      // We're overriding the default UI, so depend on that default UI.
      array('aloha', 'aloha.common/ui'),
      // Icons for the UI.
      array('iconfonts', 'spark_icons'),
      // @todo: get rid of this dependency; we only need it for a few CSS styles.
      array('system', 'ui'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_element_info_alter().
 */
function aloha_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'aloha_pre_render_text_format';
}

/**
 * Process a text format widget to load and attach Aloha Editor.
 *
 * The element's #id is used as reference to attach Aloha Editor.
 */
function aloha_pre_render_text_format($element) {
  // filter_process_format() copies properties to the expanded 'value' child
  // element. Skip this text format widget, if it contains no 'format' or when
  // the current user does not have access to edit the value.
  if (!isset($element['format']) || !empty($element['value']['#disabled'])) {
    return $element;
  }
  // Allow modules to programmatically enforce no client-side editor by setting
  // the #aloha property to FALSE.
  if (isset($element['#aloha']) && !$element['#aloha']) {
    return $element;
  }

  $format_field = &$element['format'];
  $field = &$element['value'];
  $settings = array(
    'field' => $field['#id'],
  );

  $format_id = $field['#format'];

  // Let Aloha Editor know the allowed tags.
  $filter_types = filter_get_filter_types_by_format($format_id);
  $unwanted_types = array(FILTER_TYPE_TRANSFORM_DOM, FILTER_TYPE_TRANSFORM_TEXT);
  if (count(array_intersect($unwanted_types, $filter_types))) {
    $field['#attributes']['class'][] = 'aloha-text-with-transformation-filters';
  }
  else {
    $field['#attributes']['class'][] = 'aloha-text-without-transformation-filters';
  }

  // Gather all necessary metadata for all available formats for this field.
  foreach ($format_field['format']['#options'] as $format_id => $format_name) {
    $filter_types = filter_get_filter_types_by_format($format_id);
    $allowed_tags = filter_get_allowed_tags_by_format($format_id);
    $no_disallowed_tags = empty($allowed_tags);
    $necessary_tags_allowed = $no_disallowed_tags || (in_array('br', $allowed_tags) && in_array('p', $allowed_tags));
    $settings[$format_id] = array(
      // Aloha Editor should only be enabled if no "HTML generator" filters are
      // used in this format, and the <br> and <p> tags are allowed.
      'status' => !in_array(FILTER_TYPE_HTML_GENERATOR, $filter_types)
                  && $necessary_tags_allowed,
      // Let Aloha Editor know which tags are allowed; it will reconfigure its
      // UI to match that.
      'allowedTags' => implode(',', $allowed_tags),
    );
  }

  // Use a hidden element for a single text format.
  if (!$format_field['format']['#access']) {
    $format_field['aloha'] = array(
      '#type' => 'hidden',
      '#name' => $format_field['format']['#name'],
      '#value' => $format_id,
      '#attributes' => array(
        'id' => $format_field['format']['#id'],
        'class' => array('aloha-formatselector-for-textarea'),
      ),
      '#attached' => array(
        'library' => array(
          array('aloha', 'aloha-for-textareas'),
        ),
        'js' => array(
          array(
            'type' => 'setting',
            'data' => array('aloha' => array('textareas' => array(
              $format_field['format']['#id'] => $settings
            ))),
          ),
        ),
      ),
    );
  }
  // Otherwise, attach to text format selector.
  else {
    $format_field['format']['#attributes']['class'][] = 'aloha-formatselector-for-textarea';
    $format_field['format']['#attached']['library'][] = array('aloha', 'aloha-for-textareas');
    $format_field['format']['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array('aloha' => array('textareas' => array(
        $format_field['format']['#id'] => $settings
      ))),
    );
  }

  return $element;
}

/**
 * @defgroup aloha_api Aloha Editor API
 * @{
 */

/**
 * Helper function to create Aloha.settings entries for Aloha Editor plug-ins
 * that are defined in hook_library() as libraries.
 *
 * Note that Aloha.settings initially lives as Drupal.settings.aloha.settings.
 *
 * Also note that Drupal.settings.aloha.plugins.load is initially an *array* of
 * Aloha Editor plug-ins to load, instead of a comma-separated list. Just before
 * Aloha.deferInit() is called, it is transformed into the comma-separated list
 * that Aloha Editor expects.
 *
 * @param $settings
 *   The Aloha settings to add.
 */
function aloha_plugin_js_settings($settings) {
  return array(
    'type' => 'setting',
    'data' => array('aloha' => array('settings' => $settings))
  );
}

/**
 * @} End of "defgroup aloha_api".
 */
